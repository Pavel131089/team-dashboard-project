{"version":3,"file":"Login-BXBoyeqF.js","sources":["../../../../src/components/auth/LoginForm.tsx","../../../../src/services/auth/authService.ts","../../../../src/hooks/useAuth.ts","../../../../src/pages/Login.tsx"],"sourcesContent":["import { Button } from \"@/components/ui/button\";\nimport { CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport Icon from \"@/components/ui/icon\";\nimport { LoginFormData } from \"@/hooks/useAuth\";\n\n/**\n * Компонент отображения ошибки авторизации\n */\nexport const LoginError = ({ message }: { message: string }) => {\n  return (\n    <Alert variant=\"destructive\">\n      <Icon name=\"AlertTriangle\" className=\"h-4 w-4\" />\n      <AlertTitle>Ошибка</AlertTitle>\n      <AlertDescription>{message}</AlertDescription>\n    </Alert>\n  );\n};\n\n/**\n * Компонент с демонстрационными учетными данными\n */\nexport const DemoCredentials = () => {\n  return (\n    <div className=\"pt-2 text-sm text-slate-500\">\n      <p>Для демо-доступа используйте:</p>\n      <ul className=\"list-disc pl-5 mt-1 space-y-1\">\n        <li>\n          Руководитель:{\" \"}\n          <span className=\"font-medium\">manager / manager123</span>\n        </li>\n        <li>\n          Сотрудник: <span className=\"font-medium\">employee / employee123</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\n/**\n * Компонент формы входа в систему\n */\ninterface LoginFormProps {\n  formData: LoginFormData;\n  error: string | null;\n  onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onRoleChange: (value: string) => void;\n  onSubmit: (e: React.FormEvent) => void;\n}\n\nconst LoginForm = ({\n  formData,\n  error,\n  onInputChange,\n  onRoleChange,\n  onSubmit,\n}: LoginFormProps) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <CardContent className=\"space-y-4\">\n        {error && <LoginError message={error} />}\n\n        <UsernameField value={formData.username} onChange={onInputChange} />\n        <PasswordField value={formData.password} onChange={onInputChange} />\n        <RoleSelector value={formData.role} onChange={onRoleChange} />\n\n        <DemoCredentials />\n      </CardContent>\n\n      <CardFooter>\n        <Button type=\"submit\" className=\"w-full\">\n          Войти\n        </Button>\n      </CardFooter>\n    </form>\n  );\n};\n\n/**\n * Поле для ввода имени пользователя\n */\nconst UsernameField = ({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <Label htmlFor=\"username\">Имя пользователя</Label>\n      <Input\n        id=\"username\"\n        name=\"username\"\n        placeholder=\"Введите имя пользователя\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\n/**\n * Поле для ввода пароля\n */\nconst PasswordField = ({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <Label htmlFor=\"password\">Пароль</Label>\n      <Input\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n        placeholder=\"Введите пароль\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\n/**\n * Выбор роли пользователя\n */\nconst RoleSelector = ({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n}) => {\n  return (\n    <div className=\"space-y-2\">\n      <Label>Выберите роль</Label>\n      <RadioGroup\n        value={value}\n        onValueChange={onChange}\n        className=\"flex space-x-4\"\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"manager\" id=\"manager\" />\n          <Label htmlFor=\"manager\">Руководитель</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"employee\" id=\"employee\" />\n          <Label htmlFor=\"employee\">Сотрудник</Label>\n        </div>\n      </RadioGroup>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import { LoginFormData } from \"@/hooks/useAuth\";\nimport { User, userService } from \"./userService\";\nimport { sessionService } from \"./sessionService\";\nimport { toast } from \"sonner\";\n\ninterface LoginResult {\n  success: boolean;\n  user?: User;\n  error?: string;\n}\n\n/**\n * Сервис авторизации\n * Отвечает за процессы входа, проверки учетных данных\n */\nexport const authService = {\n  /**\n   * Авторизация пользователя\n   *\n   * @param credentials - Учетные данные для входа\n   * @returns Результат авторизации\n   */\n  login(credentials: LoginFormData): LoginResult {\n    try {\n      console.log(\"Попытка входа:\", credentials);\n\n      // Инициализируем пользователей при каждой попытке входа\n      userService.initializeDefaultUsers();\n\n      // Проверяем стандартные учетные данные напрямую\n      if (this.isDefaultUser(credentials)) {\n        console.log(\"Обнаружен вход со стандартными учетными данными\");\n\n        const defaultUser = this.createDefaultUserFromCredentials(credentials);\n        // Создаем сессию для стандартного пользователя\n        this.createUserSession(defaultUser);\n\n        return {\n          success: true,\n          user: defaultUser,\n        };\n      }\n\n      // Поиск пользователя по учетным данным если это не стандартный пользователь\n      const user = this.findUserByCredentials(credentials);\n\n      if (!user) {\n        return {\n          success: false,\n          error: \"Неверное имя пользователя или пароль\",\n        };\n      }\n\n      // Создаем сессию пользователя\n      this.createUserSession(user);\n\n      // Записываем данные об успешном входе в лог\n      console.log(\"Успешный вход:\", user.name, user.role);\n\n      return {\n        success: true,\n        user,\n      };\n    } catch (error) {\n      console.error(\"Ошибка при авторизации:\", error);\n      return {\n        success: false,\n        error: \"Произошла ошибка при входе в систему\",\n      };\n    }\n  },\n\n  /**\n   * Проверяет, являются ли учетные данные стандартными\n   */\n  isDefaultUser(credentials: LoginFormData): boolean {\n    const { username, password, role } = credentials;\n\n    return (\n      (username === \"manager\" &&\n        password === \"manager123\" &&\n        role === \"manager\") ||\n      (username === \"employee\" &&\n        password === \"employee123\" &&\n        role === \"employee\")\n    );\n  },\n\n  /**\n   * Создает объект пользователя из стандартных учетных данных\n   */\n  createDefaultUserFromCredentials(credentials: LoginFormData): User {\n    const { username, password, role } = credentials;\n\n    return {\n      id: username === \"manager\" ? \"default-manager\" : \"default-employee\",\n      name: username === \"manager\" ? \"Менеджер\" : \"Сотрудник\",\n      email: username,\n      password: password,\n      role: role,\n    };\n  },\n\n  /**\n   * Поиск пользователя по учетным данным\n   *\n   * @param credentials - Учетные данные пользователя\n   * @returns Найденный пользователь или null\n   */\n  findUserByCredentials(credentials: LoginFormData): User | null {\n    console.log(\"Поиск пользователя по учетным данным:\", credentials);\n\n    const { username, password, role } = credentials;\n\n    // Получаем всех пользователей из хранилища\n    const users = userService.getUsersFromStorage();\n    console.log(\"Пользователи в хранилище:\", users.length);\n\n    // Проверка на случай, если хранилище повреждено\n    if (!Array.isArray(users)) {\n      console.warn(\"Хранилище пользователей повреждено, инициализируем заново\");\n      userService.initializeDefaultUsers();\n      return null;\n    }\n\n    // Ищем пользователя по email/имени, паролю и роли\n    for (const user of users) {\n      const emailMatch =\n        user.email && user.email.toLowerCase() === username.toLowerCase();\n      const nameMatch =\n        user.name && user.name.toLowerCase() === username.toLowerCase();\n\n      if (\n        (emailMatch || nameMatch) &&\n        user.password === password &&\n        user.role === role\n      ) {\n        console.log(\"Найден пользователь:\", user.name);\n        return user;\n      }\n    }\n\n    console.log(\"Пользователь не найден\");\n    return null;\n  },\n\n  /**\n   * Создание сессии пользователя\n   *\n   * @param user - Пользователь для создания сессии\n   */\n  createUserSession(user: User): void {\n    // Создаем объект сессии\n    const sessionData = {\n      id: user.id,\n      username: user.name,\n      role: user.role,\n      isAuthenticated: true,\n      loginTime: new Date().toISOString(),\n    };\n\n    // Сохраняем сессию\n    sessionService.saveSession(sessionData);\n\n    // Инициализируем хранилище проектов, если оно не существует\n    if (!localStorage.getItem(\"projects\")) {\n      localStorage.setItem(\"projects\", JSON.stringify([]));\n    }\n\n    // Выводим информацию в консоль\n    console.log(\"Создана сессия пользователя:\", sessionData);\n  },\n};\n\n/**\n * Выполняет вход пользователя\n * @param credentials Учетные данные пользователя\n * @returns Результат входа\n */\nexport const login = (credentials: LoginCredentials): LoginResult => {\n  try {\n    // Получаем пользователей из localStorage\n    const users = userService.getUsers();\n\n    // Ищем пользователя по логину\n    const user = users.find(\n      (u) =>\n        u.email.toLowerCase() === credentials.username.toLowerCase() ||\n        u.username?.toLowerCase() === credentials.username.toLowerCase(),\n    );\n\n    // Если пользователь не найден или пароль неверный, возвращаем ошибку\n    if (!user) {\n      return {\n        success: false,\n        error: \"Пользователь не найден\",\n      };\n    }\n\n    if (user.password !== credentials.password) {\n      return {\n        success: false,\n        error: \"Неверный пароль\",\n      };\n    }\n\n    // Проверяем соответствие роли\n    if (user.role !== credentials.role) {\n      return {\n        success: false,\n        error: `Пользователь не имеет роли \"${\n          credentials.role === \"manager\" ? \"Руководитель\" : \"Сотрудник\"\n        }\"`,\n      };\n    }\n\n    // Создаем объект сессии\n    const session: UserSession = {\n      id: user.id,\n      username: user.name || user.email,\n      role: user.role,\n      isAuthenticated: true,\n      loginTime: new Date().toISOString(),\n    };\n\n    // Сохраняем сессию в localStorage\n    sessionService.saveSession(session);\n\n    return {\n      success: true,\n      user: session,\n    };\n  } catch (error) {\n    console.error(\"Ошибка при входе:\", error);\n    return {\n      success: false,\n      error: \"Произошла ошибка при входе\",\n    };\n  }\n};\n","import { useState, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"sonner\";\nimport { authService } from \"@/services/auth/authService\";\nimport { sessionService } from \"@/services/auth/sessionService\";\nimport { userService } from \"@/services/auth/userService\";\n\n// Типы данных\nexport type UserRole = \"manager\" | \"employee\";\n\nexport interface LoginFormData {\n  username: string;\n  password: string;\n  role: UserRole;\n}\n\n/**\n * Хук для управления аутентификацией пользователя\n */\nexport function useAuth(navigateTo?: string) {\n  // Состояние формы входа\n  const [formData, setFormData] = useState<LoginFormData>({\n    username: \"\",\n    password: \"\",\n    role: \"manager\",\n  });\n\n  // Состояние ошибки\n  const [error, setError] = useState<string | null>(null);\n\n  // Хук для навигации\n  const navigate = useNavigate();\n\n  /**\n   * Обработчик изменения полей ввода\n   */\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { name, value } = e.target;\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    },\n    [],\n  );\n\n  /**\n   * Обработчик изменения роли пользователя\n   */\n  const handleRoleChange = useCallback((value: string) => {\n    setFormData((prev) => ({ ...prev, role: value as UserRole }));\n  }, []);\n\n  /**\n   * Перенаправляет пользователя в зависимости от роли\n   */\n  const redirectToRolePage = useCallback(\n    (role: UserRole) => {\n      const targetPath = role === \"manager\" ? \"/dashboard\" : \"/employee\";\n      const path = navigateTo || targetPath;\n      navigate(path);\n    },\n    [navigate, navigateTo],\n  );\n\n  // Проверяет существующую сессию пользователя\n  // Если сессия найдена, перенаправляет на соответствующую страницу\n  const checkExistingSession = useCallback(() => {\n    try {\n      // Удостоверимся, что у нас есть дефолтные пользователи\n      userService.initializeDefaultUsers();\n\n      // Получаем текущую сессию\n      const session = sessionService.getCurrentSession();\n\n      // Если сессия существует и пользователь аутентифицирован\n      if (session && session.isAuthenticated) {\n        // Вместо прямого вызова redirectToRolePage, возвращаем true\n        // и данные о роли для дальнейшей обработки в компоненте\n        return {\n          authenticated: true,\n          role: session.role as UserRole,\n        };\n      }\n\n      // Проверяем наличие сообщения об ошибке\n      const errorMessage = sessionService.getErrorMessage();\n      if (errorMessage) {\n        setError(errorMessage);\n      }\n\n      return {\n        authenticated: false,\n        role: null,\n      };\n    } catch (error) {\n      console.error(\"Ошибка при проверке сессии:\", error);\n      // В случае ошибки лучше сбросить сессию\n      sessionService.clearSession();\n      return {\n        authenticated: false,\n        role: null,\n      };\n    }\n  }, []);\n\n  /**\n   * Обработчик отправки формы входа\n   */\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      setError(null);\n\n      // Валидация формы\n      if (!formData.username.trim() || !formData.password.trim()) {\n        setError(\"Пожалуйста, заполните все поля\");\n        return;\n      }\n\n      try {\n        console.log(\"Отправка формы авторизации:\", formData);\n\n        // Создаем копию данных формы для гарантии отсутствия мутации\n        const credentials = { ...formData };\n\n        // Попытка авторизации\n        const result = authService.login(credentials);\n\n        if (result.success && result.user) {\n          console.log(\"Успешный вход:\", result.user);\n\n          // При успешном входе показываем уведомление - используем setTimeout\n          // для предотвращения обновления состояния во время рендеринга\n          setTimeout(() => {\n            toast.success(`Добро пожаловать, ${result.user!.name}!`, {\n              duration: 3000,\n            });\n\n            // Перенаправляем на соответствующую страницу\n            redirectToRolePage(result.user!.role);\n          }, 0);\n        } else {\n          console.error(\"Ошибка входа:\", result.error);\n\n          // При ошибке устанавливаем сообщение об ошибке\n          setError(result.error || \"Произошла ошибка при входе\");\n        }\n      } catch (error) {\n        console.error(\"Ошибка авторизации:\", error);\n        setError(\n          \"Произошла непредвиденная ошибка при входе. Попробуйте позже.\",\n        );\n      }\n    },\n    [formData, redirectToRolePage],\n  );\n\n  /**\n   * Инициализирует дефолтных пользователей в системе\n   */\n  const initializeDefaultUsers = useCallback(() => {\n    userService.initializeDefaultUsers();\n    if (!localStorage.getItem(\"projects\")) {\n      localStorage.setItem(\"projects\", JSON.stringify([]));\n    }\n  }, []);\n\n  /**\n   * Проверяет аутентификацию пользователя и возвращает данные текущего пользователя\n   */\n  const checkUserAuth = useCallback(() => {\n    return sessionService.getCurrentSession();\n  }, []);\n\n  /**\n   * Выход из системы\n   */\n  const logout = useCallback(() => {\n    sessionService.clearSession();\n\n    // Используем setTimeout для предотвращения обновления состояния во время рендеринга\n    setTimeout(() => {\n      toast.success(\"Вы успешно вышли из системы\");\n      navigate(\"/login\");\n    }, 0);\n  }, [navigate]);\n\n  // Возвращаем объект с методами и состояниями\n  return {\n    // Состояния\n    formData,\n    error,\n\n    // Обработчики формы\n    handleInputChange,\n    handleRoleChange,\n    handleSubmit,\n\n    // Методы аутентификации\n    checkExistingSession,\n    initializeDefaultUsers,\n    checkUserAuth,\n    logout,\n\n    // Вспомогательные методы\n    setError,\n  };\n}\n\n// Экспортируем дополнительные типы\nexport type { User } from \"@/services/auth/userService\";\n","\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Alert, AlertTitle, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport LoginForm from \"@/components/auth/LoginForm\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Icon from \"@/components/ui/icon\";\n\nconst Login: React.FC = () => {\n  const navigate = useNavigate();\n  const [isRedirecting, setIsRedirecting] = useState(false);\n  const [diagnosticInfo, setDiagnosticInfo] = useState<any>({});\n  const [error, setError] = useState<string | null>(null);\n  const [isStorageAvailable, setIsStorageAvailable] = useState(true);\n\n  const {\n    formData,\n    error: authError,\n    handleInputChange,\n    handleRoleChange,\n    handleSubmit,\n    checkExistingSession,\n    initializeDefaultUsers,\n  } = useAuth();\n\n  // Проверяем localStorage\n  useEffect(() => {\n    try {\n      const testKey = \"test-storage-login\";\n      localStorage.setItem(testKey, \"test\");\n      localStorage.removeItem(testKey);\n      setIsStorageAvailable(true);\n      console.log(\"LocalStorage доступен\");\n    } catch (e) {\n      console.error(\"LocalStorage недоступен:\", e);\n      setIsStorageAvailable(false);\n      setError(\"LocalStorage недоступен. Проверьте настройки браузера.\");\n    }\n  }, []);\n\n  // Инициализируем данные при монтировании\n  useEffect(() => {\n    try {\n      console.log(\"Инициализация данных на странице входа\");\n      \n      // Собираем диагностическую информацию\n      const info = {\n        url: window.location.href,\n        path: window.location.pathname,\n        userAgent: navigator.userAgent,\n        time: new Date().toISOString(),\n      };\n      setDiagnosticInfo(info);\n      console.log(\"Диагностическая информация:\", info);\n\n      // Инициализируем пользователей, если хранилище доступно\n      if (isStorageAvailable) {\n        initializeDefaultUsers();\n      }\n    } catch (e) {\n      console.error(\"Ошибка при инициализации данных:\", e);\n      setError(`Ошибка инициализации: ${(e as Error).message}`);\n    }\n  }, [initializeDefaultUsers, isStorageAvailable]);\n\n  // Проверяем существующую сессию\n  useEffect(() => {\n    if (!isStorageAvailable) return;\n\n    try {\n      console.log(\"Проверка существующей сессии...\");\n      const sessionInfo = checkExistingSession();\n      console.log(\"Результат проверки сессии:\", sessionInfo);\n\n      if (sessionInfo.authenticated && sessionInfo.role) {\n        setIsRedirecting(true);\n        const target = sessionInfo.role === \"manager\" ? \"/dashboard\" : \"/employee\";\n        \n        console.log(\"Перенаправление на\", target);\n        setTimeout(() => {\n          navigate(target, { replace: true });\n        }, 10);\n      } else {\n        console.log(\"Активная сессия не найдена, показываем форму входа\");\n      }\n    } catch (error) {\n      console.error(\"Ошибка при проверке сессии:\", error);\n      setError(`Ошибка проверки сессии: ${(error as Error).message}`);\n    }\n  }, [checkExistingSession, navigate, isStorageAvailable]);\n\n  // Обработчик формы входа с дополнительным логированием\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Отправка формы входа\", formData);\n    try {\n      handleSubmit(e);\n    } catch (error) {\n      console.error(\"Ошибка при отправке формы:\", error);\n      setError(`Ошибка входа: ${(error as Error).message}`);\n    }\n  };\n\n  // Резервный вход для отладки (только для разработки)\n  const handleDebugLogin = (role: \"manager\" | \"employee\") => {\n    console.log(`Отладочный вход с ролью: ${role}`);\n    try {\n      const testUser = {\n        id: role === \"manager\" ? \"debug-manager\" : \"debug-employee\",\n        username: role,\n        role: role,\n        isAuthenticated: true,\n        loginTime: new Date().toISOString(),\n      };\n      \n      // Сохраняем сессию напрямую\n      localStorage.setItem(\"user\", JSON.stringify(testUser));\n      \n      // Перенаправляем\n      const target = role === \"manager\" ? \"/dashboard\" : \"/employee\";\n      navigate(target, { replace: true });\n    } catch (error) {\n      console.error(\"Ошибка при отладочном входе:\", error);\n      setError(`Ошибка отладочного входа: ${(error as Error).message}`);\n    }\n  };\n\n  // Если происходит перенаправление, показываем индикатор загрузки\n  if (isRedirecting) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-100\">\n        <div className=\"text-center\">\n          <div className=\"mb-4\">\n            <Icon name=\"Loader2\" className=\"h-8 w-8 animate-spin text-primary mx-auto\" />\n          </div>\n          <div className=\"text-gray-500\">Перенаправление...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-100 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl\">Вход в систему</CardTitle>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Отображение ошибок */}\n          {(error || authError) && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertTitle>Ошибка</AlertTitle>\n              <AlertDescription>\n                {error || authError}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Сообщение о недоступности localStorage */}\n          {!isStorageAvailable && (\n            <Alert className=\"mb-4\">\n              <AlertTitle>Проблема с хранилищем</AlertTitle>\n              <AlertDescription>\n                LocalStorage недоступен, что может вызвать проблемы с работой приложения.\n                Проверьте настройки приватности браузера.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Стандартная форма входа */}\n          <LoginForm\n            formData={formData}\n            error={null} // Ошибки отображаются через Alert выше\n            onInputChange={handleInputChange}\n            onRoleChange={handleRoleChange}\n            onSubmit={handleFormSubmit}\n          />\n\n          {/* Режим отладки - только в dev-среде */}\n          {process.env.NODE_ENV === \"development\" && (\n            <div className=\"mt-4 border-t pt-4\">\n              <div className=\"text-sm text-gray-500 mb-2\">Режим отладки:</div>\n              <div className=\"flex gap-2\">\n                <Button size=\"sm\" variant=\"outline\" className=\"flex-1\" \n                  onClick={() => handleDebugLogin(\"manager\")}>\n                  Вход как руководитель\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" className=\"flex-1\"\n                  onClick={() => handleDebugLogin(\"employee\")}>\n                  Вход как сотрудник\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["LoginError","message","jsxs","Alert","jsx","Icon","AlertTitle","AlertDescription","DemoCredentials","LoginForm","formData","error","onInputChange","onRoleChange","onSubmit","CardContent","UsernameField","PasswordField","RoleSelector","CardFooter","Button","value","onChange","Label","Input","RadioGroup","RadioGroupItem","authService","credentials","userService","defaultUser","user","username","password","role","users","emailMatch","nameMatch","sessionData","sessionService","useAuth","navigateTo","setFormData","useState","setError","navigate","useNavigate","handleInputChange","useCallback","e","name","prev","__spreadProps","__spreadValues","handleRoleChange","redirectToRolePage","checkExistingSession","session","errorMessage","handleSubmit","result","toast","initializeDefaultUsers","checkUserAuth","logout","Login","isRedirecting","setIsRedirecting","diagnosticInfo","setDiagnosticInfo","isStorageAvailable","setIsStorageAvailable","authError","useEffect","testKey","info","sessionInfo","target","handleFormSubmit","Card","CardHeader","CardTitle"],"mappings":"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"}