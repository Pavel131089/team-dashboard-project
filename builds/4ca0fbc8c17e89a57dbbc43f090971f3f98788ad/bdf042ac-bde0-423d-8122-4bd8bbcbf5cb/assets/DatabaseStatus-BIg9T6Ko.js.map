{"version":3,"file":"DatabaseStatus-BIg9T6Ko.js","sources":["../../../../src/components/database/DatabaseConnectionTester.tsx","../../../../src/components/database/StatusBadge.tsx","../../../../src/components/database/SyncActions.tsx","../../../../src/components/database/CloudStorageStatus.tsx","../../../../src/pages/DatabaseStatus.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport Icon from \"@/components/ui/icon\";\nimport { toast } from \"sonner\";\n\n/**\n * Компонент для тестирования подключения к локальному хранилищу\n */\nconst DatabaseConnectionTester: React.FC = () => {\n  // Состояние подключения\n  const [connectionStatus, setConnectionStatus] = useState<boolean | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [testResults, setTestResults] = useState<Array<{name: string; success: boolean; message: string}>>([]);\n\n  // Проверяем соединение при загрузке компонента\n  useEffect(() => {\n    checkConnection();\n  }, []);\n\n  /**\n   * Проверяет доступность локального хранилища\n   */\n  const checkConnection = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Простой тест доступности localStorage\n      const testKey = \"test_connection_\" + Date.now();\n      localStorage.setItem(testKey, \"test\");\n      \n      if (localStorage.getItem(testKey) === \"test\") {\n        localStorage.removeItem(testKey);\n        setConnectionStatus(true);\n      } else {\n        setConnectionStatus(false);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при проверке подключения:\", error);\n      setConnectionStatus(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Выполняет полное тестирование базы данных\n   */\n  const runDatabaseTests = async () => {\n    setIsLoading(true);\n    setTestResults([]);\n    \n    // Уведомляем пользователя о начале тестирования\n    toast.info(\"Запуск тестов базы данных...\");\n    \n    // Тест 1: Запись данных\n    let writeTestSuccess = false;\n    try {\n      const testKey = \"db_test_write_\" + Date.now();\n      localStorage.setItem(testKey, JSON.stringify({ test: true, timestamp: Date.now() }));\n      writeTestSuccess = true;\n      \n      // Добавляем результат теста\n      setTestResults(prev => [...prev, {\n        name: \"Запись данных\",\n        success: true,\n        message: \"Запись в хранилище выполнена успешно\"\n      }]);\n    } catch (error) {\n      console.error(\"Ошибка при тесте записи:\", error);\n      setTestResults(prev => [...prev, {\n        name: \"Запись данных\",\n        success: false,\n        message: \"Не удалось записать данные в хранилище\"\n      }]);\n    }\n    \n    // Небольшая задержка для наглядности\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Тест 2: Чтение данных\n    try {\n      const usersStr = localStorage.getItem(\"users\");\n      const projectsStr = localStorage.getItem(\"projects\");\n      \n      const usersResult = usersStr ? JSON.parse(usersStr) : null;\n      const projectsResult = projectsStr ? JSON.parse(projectsStr) : null;\n      \n      setTestResults(prev => [...prev, {\n        name: \"Чтение данных\",\n        success: true,\n        message: `Успешно прочитаны данные: пользователи (${usersResult ? Array.isArray(usersResult) ? usersResult.length : 'не массив' : 'нет'}), проекты (${projectsResult ? Array.isArray(projectsResult) ? projectsResult.length : 'не массив' : 'нет'})`\n      }]);\n    } catch (error) {\n      console.error(\"Ошибка при тесте чтения:\", error);\n      setTestResults(prev => [...prev, {\n        name: \"Чтение данных\",\n        success: false,\n        message: \"Не удалось прочитать данные из хранилища\"\n      }]);\n    }\n    \n    // Небольшая задержка для наглядности\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Тест 3: Удаление данных\n    if (writeTestSuccess) {\n      try {\n        const testKeys = Object.keys(localStorage).filter(key => key.startsWith(\"db_test_\"));\n        testKeys.forEach(key => localStorage.removeItem(key));\n        \n        setTestResults(prev => [...prev, {\n          name: \"Удаление данных\",\n          success: true,\n          message: `Успешно удалены тестовые данные (${testKeys.length} ключей)`\n        }]);\n      } catch (error) {\n        console.error(\"Ошибка при тесте удаления:\", error);\n        setTestResults(prev => [...prev, {\n          name: \"Удаление данных\",\n          success: false,\n          message: \"Не удалось удалить данные из хранилища\"\n        }]);\n      }\n    }\n    \n    setIsLoading(false);\n    \n    // Общий результат\n    const allSuccess = testResults.every(test => test.success);\n    if (allSuccess) {\n      toast.success(\"Все тесты базы данных пройдены успешно\");\n    } else {\n      toast.error(\"Некоторые тесты базы данных не пройдены\");\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex justify-between items-center\">\n          <span>Статус подключения к хранилищу</span>\n          <ConnectionStatusIndicator isConnected={connectionStatus} />\n        </CardTitle>\n        <CardDescription>\n          Тестирование подключения к хранилищу данных и операций\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Оповещение о статусе подключения */}\n        <ConnectionStatusAlert connectionStatus={connectionStatus} isLoading={isLoading} />\n\n        {/* Кнопки для тестирования */}\n        <div className=\"flex flex-wrap gap-3\">\n          <Button \n            onClick={checkConnection} \n            disabled={isLoading}\n            variant=\"outline\"\n          >\n            {isLoading ? (\n              <Icon name=\"Loader2\" className=\"mr-2 h-4 w-4 animate-spin\" />\n            ) : (\n              <Icon name=\"RefreshCw\" className=\"mr-2 h-4 w-4\" />\n            )}\n            Проверить подключение\n          </Button>\n          \n          <Button \n            onClick={runDatabaseTests} \n            disabled={isLoading || connectionStatus !== true}\n          >\n            <Icon name=\"Database\" className=\"mr-2 h-4 w-4\" />\n            Запустить тесты базы данных\n          </Button>\n        </div>\n\n        {/* Результаты тестов */}\n        {testResults.length > 0 && (\n          <div className=\"space-y-2 mt-4\">\n            <h3 className=\"text-sm font-medium\">Результаты тестирования:</h3>\n            <div className=\"space-y-2\">\n              {testResults.map((result, index) => (\n                <TestResultItem key={index} result={result} />\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"flex justify-between border-t pt-4 text-xs text-slate-500\">\n        <div>\n          <p>Локальное хранилище (localStorage)</p>\n          <p>\n            Последняя проверка:{\" \"}\n            {connectionStatus !== null ? new Date().toLocaleString() : \"—\"}\n          </p>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\n/**\n * Компонент для отображения статуса подключения\n */\nconst ConnectionStatusIndicator: React.FC<{ isConnected: boolean | null }> = ({ \n  isConnected \n}) => {\n  if (isConnected === null) {\n    return (\n      <div className=\"px-2 py-1 text-xs font-medium rounded-md bg-blue-100 text-blue-800\">\n        Проверка...\n      </div>\n    );\n  }\n  \n  const statusClasses = isConnected\n    ? \"bg-green-100 text-green-800\"\n    : \"bg-red-100 text-red-800\";\n  \n  return (\n    <div className={`px-2 py-1 text-xs font-medium rounded-md ${statusClasses}`}>\n      {isConnected ? \"Подключено\" : \"Отключено\"}\n    </div>\n  );\n};\n\n/**\n * Компонент для отображения уведомления о статусе подключения\n */\nconst ConnectionStatusAlert: React.FC<{\n  connectionStatus: boolean | null;\n  isLoading: boolean;\n}> = ({ connectionStatus, isLoading }) => {\n  if (isLoading) {\n    return (\n      <Alert className=\"bg-blue-50 text-blue-800 border-blue-200\">\n        <Icon name=\"Loader2\" className=\"h-4 w-4 animate-spin\" />\n        <AlertTitle>Проверка подключения</AlertTitle>\n        <AlertDescription>\n          Выполняется проверка доступности локального хранилища...\n        </AlertDescription>\n      </Alert>\n    );\n  }\n  \n  if (connectionStatus === false) {\n    return (\n      <Alert variant=\"destructive\">\n        <Icon name=\"AlertTriangle\" className=\"h-4 w-4\" />\n        <AlertTitle>Проблема с подключением</AlertTitle>\n        <AlertDescription>\n          Локальное хранилище недоступно. Возможно, браузер блокирует доступ к localStorage \n          или включен режим приватного просмотра.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n  \n  if (connectionStatus === true) {\n    return (\n      <Alert className=\"bg-green-50 text-green-800 border-green-200\">\n        <Icon name=\"CheckCircle\" className=\"h-4 w-4\" />\n        <AlertTitle>Подключение установлено</AlertTitle>\n        <AlertDescription>\n          Локальное хранилище доступно и работает корректно.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n  \n  return null;\n};\n\n/**\n * Компонент для отображения результата теста\n */\nconst TestResultItem: React.FC<{\n  result: { name: string; success: boolean; message: string };\n}> = ({ result }) => {\n  const { name, success, message } = result;\n  \n  return (\n    <div className={`p-2 rounded-md ${success ? 'bg-green-50' : 'bg-red-50'}`}>\n      <div className=\"flex items-center\">\n        {success ? (\n          <Icon name=\"CheckCircle\" className=\"h-4 w-4 text-green-600 mr-2\" />\n        ) : (\n          <Icon name=\"XCircle\" className=\"h-4 w-4 text-red-600 mr-2\" />\n        )}\n        <span className=\"font-medium\">{name}</span>\n      </div>\n      <p className={`text-xs mt-1 ${success ? 'text-green-800' : 'text-red-800'}`}>\n        {message}\n      </p>\n    </div>\n  );\n};\n\nexport default DatabaseConnectionTester;\n","\nimport React from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype Status = \"idle\" | \"syncing\" | \"success\" | \"error\";\n\ninterface StatusBadgeProps {\n  status: Status;\n}\n\n/**\n * Компонент для отображения статуса синхронизации\n */\nconst StatusBadge: React.FC<StatusBadgeProps> = ({ status }) => {\n  const getBadgeStyles = (status: Status) => {\n    switch (status) {\n      case \"idle\":\n        return \"bg-slate-100 text-slate-800\";\n      case \"syncing\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"success\":\n        return \"bg-green-100 text-green-800\";\n      case \"error\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-slate-100 text-slate-800\";\n    }\n  };\n\n  const getStatusText = (status: Status) => {\n    switch (status) {\n      case \"idle\":\n        return \"Не синхронизировано\";\n      case \"syncing\":\n        return \"Синхронизация...\";\n      case \"success\":\n        return \"Синхронизировано\";\n      case \"error\":\n        return \"Ошибка синхронизации\";\n      default:\n        return \"Неизвестный статус\";\n    }\n  };\n\n  return (\n    <Badge\n      variant=\"outline\"\n      className={getBadgeStyles(status)}\n    >\n      {getStatusText(status)}\n    </Badge>\n  );\n};\n\nexport default StatusBadge;\n","\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport Icon from \"@/components/ui/icon\";\n\ninterface SyncActionsProps {\n  isSyncing: boolean;\n  onRefreshStats: () => void;\n  onUploadToCloud: () => void;\n  onDownloadFromCloud: () => void;\n}\n\n/**\n * Компонент с кнопками действий для синхронизации\n */\nconst SyncActions: React.FC<SyncActionsProps> = ({\n  isSyncing,\n  onRefreshStats,\n  onUploadToCloud,\n  onDownloadFromCloud,\n}) => {\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Button\n        variant=\"outline\"\n        className=\"w-full\"\n        disabled={isSyncing}\n        onClick={onRefreshStats}\n      >\n        <Icon name=\"RefreshCw\" className=\"mr-2 h-4 w-4\" />\n        Обновить статистику\n      </Button>\n\n      <div className=\"grid grid-cols-2 gap-2\">\n        <Button disabled={isSyncing} onClick={onUploadToCloud}>\n          <Icon name=\"Upload\" className=\"mr-2 h-4 w-4\" />\n          Загрузить в облако\n        </Button>\n\n        <Button disabled={isSyncing} onClick={onDownloadFromCloud}>\n          <Icon name=\"Download\" className=\"mr-2 h-4 w-4\" />\n          Загрузить из облака\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SyncActions;\n","\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport StatusBadge from \"./StatusBadge\";\nimport SyncActions from \"./SyncActions\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport Icon from \"@/components/ui/icon\";\n\n/**\n * Компонент для отображения статуса облачного хранилища\n * и управления синхронизацией\n */\nconst CloudStorageStatus: React.FC = () => {\n  // Состояние синхронизации\n  const [syncStatus, setSyncStatus] = useState<\"idle\" | \"syncing\" | \"success\" | \"error\">(\"idle\");\n  const [lastSync, setLastSync] = useState<string | null>(null);\n  const [counters, setCounters] = useState({\n    users: 0,\n    projects: 0\n  });\n  \n  // Эффект для загрузки начальных данных\n  useEffect(() => {\n    loadStorageStats();\n    // Проверяем, было ли сохранено время последней синхронизации\n    const savedLastSync = localStorage.getItem('lastSyncTime');\n    if (savedLastSync) {\n      setLastSync(savedLastSync);\n    }\n  }, []);\n\n  /**\n   * Загружает статистику хранилища\n   */\n  const loadStorageStats = () => {\n    try {\n      // Получаем данные из локального хранилища\n      const usersStr = localStorage.getItem(\"users\") || \"[]\";\n      const projectsStr = localStorage.getItem(\"projects\") || \"[]\";\n      \n      // Парсим данные\n      const users = JSON.parse(usersStr);\n      const projects = JSON.parse(projectsStr);\n      \n      // Обновляем счетчики\n      setCounters({\n        users: Array.isArray(users) ? users.length : 0,\n        projects: Array.isArray(projects) ? projects.length : 0\n      });\n      \n      // Обновляем статус если ранее была ошибка\n      if (syncStatus === \"error\") {\n        setSyncStatus(\"idle\");\n      }\n    } catch (error) {\n      console.error(\"Ошибка при загрузке статистики:\", error);\n      setSyncStatus(\"error\");\n    }\n  };\n\n  /**\n   * Имитирует синхронизацию данных с облаком\n   */\n  const syncWithCloud = (direction: \"upload\" | \"download\") => {\n    // Устанавливаем статус синхронизации\n    setSyncStatus(\"syncing\");\n    \n    // Имитация задержки сетевого запроса\n    setTimeout(() => {\n      try {\n        if (direction === \"upload\") {\n          // Имитация загрузки в облако\n          console.log(\"Имитация загрузки данных в облако...\");\n        } else {\n          // Имитация загрузки из облака\n          console.log(\"Имитация загрузки данных из облака...\");\n        }\n        \n        // Обновляем статус и время синхронизации\n        setSyncStatus(\"success\");\n        const now = new Date().toLocaleString();\n        setLastSync(now);\n        localStorage.setItem('lastSyncTime', now);\n        \n        // Обновляем статистику\n        loadStorageStats();\n      } catch (error) {\n        console.error(\"Ошибка при синхронизации:\", error);\n        setSyncStatus(\"error\");\n      }\n    }, 2000); // Имитация задержки сети\n  };\n\n  /**\n   * Обработчики действий\n   */\n  const handleRefreshStats = loadStorageStats;\n  const handleUploadToCloud = () => syncWithCloud(\"upload\");\n  const handleDownloadFromCloud = () => syncWithCloud(\"download\");\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex justify-between items-center\">\n          <span>Синхронизация данных</span>\n          <StatusBadge status={syncStatus} />\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Счетчики сущностей */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <StorageCounter title=\"Пользователи\" count={counters.users} />\n          <StorageCounter title=\"Проекты\" count={counters.projects} />\n        </div>\n\n        {/* Кнопки действий */}\n        <SyncActions\n          isSyncing={syncStatus === \"syncing\"}\n          onRefreshStats={handleRefreshStats}\n          onUploadToCloud={handleUploadToCloud}\n          onDownloadFromCloud={handleDownloadFromCloud}\n        />\n\n        {/* Информация о синхронизации */}\n        {syncStatus === \"success\" && (\n          <Alert className=\"bg-green-50 text-green-800 border-green-200\">\n            <Icon name=\"CheckCircle\" className=\"h-4 w-4\" />\n            <AlertTitle>Синхронизация выполнена успешно</AlertTitle>\n            <AlertDescription>\n              Данные успешно синхронизированы с облаком.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {syncStatus === \"error\" && (\n          <Alert variant=\"destructive\">\n            <Icon name=\"AlertTriangle\" className=\"h-4 w-4\" />\n            <AlertTitle>Ошибка синхронизации</AlertTitle>\n            <AlertDescription>\n              Не удалось выполнить синхронизацию. Пожалуйста, попробуйте позже.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Время последней синхронизации */}\n        {lastSync && (\n          <div className=\"text-xs text-slate-500 text-center mt-2\">\n            Последняя синхронизация: {lastSync}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n/**\n * Компонент для отображения счетчика сущностей\n */\nconst StorageCounter: React.FC<{ title: string; count: number }> = ({ \n  title, \n  count \n}) => {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-4 bg-slate-50 rounded-lg\">\n      <Icon \n        name={title === \"Пользователи\" ? \"Users\" : \"FolderKanban\"} \n        className=\"h-8 w-8 mb-2 text-slate-500\" \n      />\n      <h3 className=\"font-medium text-sm\">{title}</h3>\n      <p className=\"text-2xl font-bold\">{count}</p>\n    </div>\n  );\n};\n\nexport default CloudStorageStatus;\n","import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport Icon from \"@/components/ui/icon\";\nimport DatabaseConnectionTester from \"@/components/database/DatabaseConnectionTester\";\nimport CloudStorageStatus from \"@/components/database/CloudStorageStatus\";\n\n/**\n * Страница статуса базы данных\n * Содержит компоненты для проверки соединения и синхронизации данных\n */\nconst DatabaseStatus: React.FC = () => {\n  // Функция для возврата на предыдущую страницу\n  const handleGoBack = () => {\n    // Пробуем использовать нативное API истории браузера\n    window.history.back();\n  };\n\n  // Альтернативная функция для возврата на конкретный маршрут\n  const handleGoToDashboard = () => {\n    window.location.href = \"/dashboard\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Шапка страницы */}\n      <header className=\"bg-white shadow-sm\">\n        <div className=\"container mx-auto px-4 py-3 flex justify-between items-center\">\n          <h1 className=\"text-xl font-bold truncate\">Статус базы данных</h1>\n          <div className=\"flex items-center gap-2 md:gap-4\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleGoToDashboard}>\n              <Icon name=\"ArrowLeft\" className=\"mr-2 h-4 w-4\" />\n              Вернуться к панели\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Основное содержимое */}\n      <main className=\"container mx-auto px-4 py-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Компонент проверки подключения к хранилищу */}\n          <DatabaseConnectionTester />\n\n          {/* Компонент синхронизации с облаком */}\n          <CloudStorageStatus />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default DatabaseStatus;\n"],"names":["DatabaseConnectionTester","connectionStatus","setConnectionStatus","useState","isLoading","setIsLoading","testResults","setTestResults","useEffect","checkConnection","__async","testKey","error","runDatabaseTests","toast","writeTestSuccess","prev","resolve","usersStr","projectsStr","usersResult","projectsResult","testKeys","key","test","jsxs","Card","CardHeader","CardTitle","jsx","ConnectionStatusIndicator","CardDescription","CardContent","ConnectionStatusAlert","Button","Icon","result","index","TestResultItem","CardFooter","isConnected","statusClasses","Alert","AlertTitle","AlertDescription","name","success","message","StatusBadge","status","getBadgeStyles","getStatusText","Badge","SyncActions","isSyncing","onRefreshStats","onUploadToCloud","onDownloadFromCloud","CloudStorageStatus","syncStatus","setSyncStatus","lastSync","setLastSync","counters","setCounters","loadStorageStats","savedLastSync","users","projects","syncWithCloud","direction","now","handleRefreshStats","handleUploadToCloud","handleDownloadFromCloud","StorageCounter","title","count","DatabaseStatus","handleGoToDashboard"],"mappings":"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"}