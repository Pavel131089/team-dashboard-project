{"version":3,"file":"Employee-BSdznIy6.js","sources":["../../../../src/components/employee/EmployeeLayout.tsx","../../../../src/components/employee/EmployeeContent.tsx","../../../../src/utils/progressUtils.ts","../../../../src/components/employee/EmptyAvailableTasks.tsx","../../../../src/components/employee/AvailableTasksSection.tsx","../../../../src/components/employee/task/CommentInputForm.tsx","../../../../src/components/employee/EmployeeTasksCard.tsx","../../../../src/hooks/useEmployeeData.ts","../../../../src/pages/Employee.tsx"],"sourcesContent":["import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport Icon from \"@/components/ui/icon\";\n\ninterface EmployeeLayoutProps {\n  children: React.ReactNode;\n  userName: string;\n  onLogout: () => void;\n}\n\nconst EmployeeLayout: React.FC<EmployeeLayoutProps> = ({\n  children,\n  userName,\n  onLogout,\n}) => {\n  // Получаем отображаемое имя пользователя\n  const displayName = userName || \"Сотрудник\";\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <header className=\"bg-white shadow-sm\">\n        <div className=\"container mx-auto px-4 py-3 flex justify-between items-center\">\n          <h1 className=\"text-xl font-bold truncate\">Личный кабинет</h1>\n          <div className=\"flex items-center gap-2 md:gap-4\">\n            <span className=\"text-sm text-slate-600 flex items-center\">\n              <Icon name=\"User\" className=\"mr-1 md:mr-2 h-4 w-4\" />\n              <span className=\"hidden md:inline\">{displayName}</span>\n              <span className=\"md:hidden\">{displayName}</span>\n            </span>\n            <Button variant=\"outline\" size=\"sm\" onClick={onLogout}>\n              <Icon name=\"LogOut\" className=\"md:mr-2 h-4 w-4\" />\n              <span className=\"hidden md:inline\">Выйти</span>\n            </Button>\n          </div>\n        </div>\n      </header>\n      <main className=\"container mx-auto px-4 py-6\">{children}</main>\n      <footer className=\"bg-white border-t border-slate-200 py-4 mt-auto\">\n        <div className=\"container mx-auto px-4 text-center text-sm text-slate-500\">\n          &copy; {new Date().getFullYear()} Система управления проектами\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default EmployeeLayout;\n","\nimport React, { ReactNode } from \"react\";\n\ninterface EmployeeContentProps {\n  children: ReactNode;\n}\n\n/**\n * Контейнер для содержимого страницы сотрудника\n */\nconst EmployeeContent: React.FC<EmployeeContentProps> = ({ children }) => {\n  return (\n    <div className=\"w-full max-w-7xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-6\">Мои задачи</h1>\n      {children}\n    </div>\n  );\n};\n\nexport default EmployeeContent;\n","/**\n * Возвращает класс цвета для прогресс-бара в зависимости от процента выполнения\n * @param percent Процент выполнения задачи\n * @returns CSS класс для цвета прогресс-бара\n */\nexport const getProgressColorClass = (percent: number): string => {\n  // Проверяем, что передано числовое значение\n  const validPercent =\n    typeof percent === \"number\" && !isNaN(percent) ? percent : 0;\n\n  if (validPercent >= 75) return \"bg-green-500\";\n  if (validPercent >= 50) return \"bg-blue-500\";\n  if (validPercent >= 25) return \"bg-yellow-500\";\n  return \"bg-red-500\";\n};\n\n/**\n * Обрабатывает изменение прогресса и обновляет дату завершения задачи при необходимости\n * @param task Текущая задача\n * @param newProgress Новое значение прогресса\n * @returns Обновленная задача\n */\nexport const processProgressChange = (task: any, newProgress: number): any => {\n  // Проверка на null/undefined\n  if (!task) return null;\n\n  // Убедимся, что передано числовое значение прогресса\n  const validProgress =\n    typeof newProgress === \"number\" && !isNaN(newProgress) ? newProgress : 0;\n\n  const updatedTask = { ...task, progress: validProgress };\n\n  // Если прогресс достиг 100%, устанавливаем дату завершения\n  if (validProgress === 100 && !updatedTask.actualEndDate) {\n    updatedTask.actualEndDate = new Date().toISOString();\n  } else if (validProgress < 100) {\n    // Если прогресс меньше 100%, убираем дату завершения\n    updatedTask.actualEndDate = null;\n  }\n\n  // Если прогресс изменился с 0%, и нет даты начала, устанавливаем ее\n  const oldProgress =\n    typeof task.progress === \"number\" && !isNaN(task.progress)\n      ? task.progress\n      : 0;\n\n  if (validProgress > 0 && oldProgress === 0 && !updatedTask.actualStartDate) {\n    updatedTask.actualStartDate = new Date().toISOString();\n  }\n\n  return updatedTask;\n};\n\n/**\n * Рассчитывает количество дней до дедлайна\n * @param endDateStr Дата дедлайна в ISO формате\n * @returns Количество дней до дедлайна, отрицательное число если дедлайн прошел\n */\nexport const getDaysUntilDeadline = (endDateStr?: string): number | null => {\n  if (!endDateStr) return null;\n\n  try {\n    const endDate = new Date(endDateStr);\n    if (isNaN(endDate.getTime())) return null;\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const timeDiff = endDate.getTime() - today.getTime();\n    return Math.ceil(timeDiff / (1000 * 3600 * 24));\n  } catch (error) {\n    console.error(\"Ошибка при расчете дней до дедлайна:\", error);\n    return null;\n  }\n};\n\n/**\n * Возвращает CSS класс для отображения статуса дедлайна\n * @param daysLeft Количество дней до дедлайна\n * @returns CSS класс для отображения статуса\n */\nexport const getDeadlineStatusClass = (daysLeft: number | null): string => {\n  if (daysLeft === null) return \"text-slate-500\";\n  if (daysLeft < 0) return \"text-red-600\";\n  if (daysLeft <= 3) return \"text-orange-500\";\n  if (daysLeft <= 7) return \"text-yellow-600\";\n  return \"text-green-600\";\n};\n","\nimport React from \"react\";\nimport Icon from \"@/components/ui/icon\";\n\nconst EmptyAvailableTasks: React.FC = () => {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-6 text-center\">\n      <Icon name=\"ClipboardList\" className=\"h-12 w-12 text-slate-300 mb-3\" />\n      <h3 className=\"text-lg font-medium mb-2\">Нет доступных задач</h3>\n      <p className=\"text-sm text-slate-500\">\n        В данный момент нет задач, которые вы могли бы взять в работу.\n        Проверьте позже или обратитесь к руководителю проекта.\n      </p>\n    </div>\n  );\n};\n\nexport default EmptyAvailableTasks;\n","import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport { Task, Project } from \"@/types/project\";\nimport { Button } from \"@/components/ui/button\";\nimport Icon from \"@/components/ui/icon\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { getProgressColorClass } from \"@/utils/progressUtils\";\nimport EmptyAvailableTasks from \"@/components/employee/EmptyAvailableTasks\";\nimport { getAssigneeNames } from \"@/utils/userUtils\"; // Добавляем импорт функции\n\ninterface AvailableTasksSectionProps {\n  tasks: any[];\n  onTakeTask: (taskId: string, projectId: string) => void;\n  projects?: Project[];\n}\n\nconst AvailableTasksSection: React.FC<AvailableTasksSectionProps> = ({\n  tasks,\n  onTakeTask,\n  projects = [],\n}) => {\n  // Проверяем, что у нас есть задачи для отображения\n  const hasAvailableTasks = Array.isArray(tasks) && tasks.length > 0;\n\n  // Простая функция форматирования даты\n  const formatDate = (dateString?: string | null): string => {\n    if (!dateString) return \"Не указано\";\n    try {\n      return new Date(dateString).toLocaleDateString(\"ru-RU\");\n    } catch (error) {\n      return \"Не указано\";\n    }\n  };\n\n  // Функция для расчета прогресса проекта\n  const calculateProjectProgress = (project: any): number => {\n    if (\n      !project ||\n      !project.tasks ||\n      !Array.isArray(project.tasks) ||\n      project.tasks.length === 0\n    ) {\n      return 0;\n    }\n\n    const totalProgress = project.tasks.reduce(\n      (sum, task) => sum + (task.progress || 0),\n      0,\n    );\n    return Math.round(totalProgress / project.tasks.length);\n  };\n\n  // Функция для отображения сотрудников, назначенных на задачу\n  const renderAssignedUsers = (task: any): JSX.Element | null => {\n    if (\n      !task.assignedToNames ||\n      !Array.isArray(task.assignedToNames) ||\n      task.assignedToNames.length === 0\n    ) {\n      return null;\n    }\n\n    // Используем функцию getAssigneeNames для получения имен пользователей\n    const displayNames = getAssigneeNames(task.assignedToNames);\n\n    if (displayNames === \"Не назначено\") {\n      return null;\n    }\n\n    return (\n      <div className=\"mt-2 text-xs text-slate-500\">\n        <div className=\"flex items-center gap-1\">\n          <Icon name=\"Users\" className=\"h-3 w-3\" />\n          <span>Исполнители: {displayNames}</span>\n        </div>\n      </div>\n    );\n  };\n\n  // Функция для поиска полной информации о проекте\n  const getFullProject = (projectId: string): Project | undefined => {\n    if (!Array.isArray(projects)) return undefined;\n    return projects.find((p) => p.id === projectId);\n  };\n\n  // Если нет задач, показываем пустое состояние\n  if (!hasAvailableTasks) {\n    return <EmptyAvailableTasks />;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Icon name=\"Briefcase\" className=\"text-primary h-5 w-5\" />\n          <CardTitle>Доступные задачи</CardTitle>\n        </div>\n        <CardDescription>\n          Задачи, которые вы можете взять в работу\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {tasks.map((item, index) => {\n          // Извлекаем task и project из структуры\n          const task = item.task || item;\n          const itemProject = item.project || {};\n\n          // Ищем полную информацию о проекте\n          const projectId = task.projectId || itemProject.id;\n          const fullProject = getFullProject(projectId) || itemProject;\n\n          // Получаем название проекта\n          const projectName = fullProject.name || itemProject.name || \"Проект\";\n\n          // Рассчитываем прогресс проекта\n          const projectProgress = calculateProjectProgress(fullProject);\n\n          // Получаем даты проекта и задачи\n          const projectStartDate =\n            fullProject.startDate || itemProject.startDate;\n          const projectEndDate = fullProject.endDate || itemProject.endDate;\n          const taskStartDate = task.startDate || projectStartDate;\n          const taskEndDate = task.endDate || projectEndDate;\n\n          return (\n            <div\n              key={task.id || `task-${index}`}\n              className=\"border rounded-lg p-4 bg-white\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h3 className=\"font-medium text-base\">\n                    {task.name || \"Без названия\"}\n                  </h3>\n                  {task.description && (\n                    <p className=\"text-sm text-slate-600 line-clamp-2 mt-1\">\n                      {task.description}\n                    </p>\n                  )}\n                </div>\n                <div className=\"bg-slate-100 px-2 py-1 rounded text-xs\">\n                  {projectName}\n                </div>\n              </div>\n\n              {/* Даты и прогресс проекта */}\n              <div className=\"mt-3 mb-2\">\n                <div className=\"flex justify-between text-xs text-slate-500 mb-1\">\n                  <div className=\"flex items-center gap-1\">\n                    <Icon name=\"Calendar\" className=\"h-3 w-3\" />\n                    <span>\n                      Проект: {formatDate(projectStartDate)} —{\" \"}\n                      {formatDate(projectEndDate)}\n                    </span>\n                  </div>\n                  <span>{projectProgress}% выполнено</span>\n                </div>\n                <Progress\n                  value={projectProgress}\n                  className=\"h-1.5\"\n                  indicatorClassName={getProgressColorClass(projectProgress)}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-x-4 gap-y-1 mt-3 text-xs text-slate-500\">\n                <div className=\"flex items-center gap-1\">\n                  <Icon name=\"Calendar\" className=\"h-3 w-3\" />\n                  <span>Начало задачи: {formatDate(taskStartDate)}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Icon name=\"CalendarClock\" className=\"h-3 w-3\" />\n                  <span>Окончание задачи: {formatDate(taskEndDate)}</span>\n                </div>\n                {task.estimatedTime !== undefined && (\n                  <div className=\"flex items-center gap-1\">\n                    <Icon name=\"Clock\" className=\"h-3 w-3\" />\n                    <span>Время: {task.estimatedTime || 0} ч.</span>\n                  </div>\n                )}\n                {task.price !== undefined && (\n                  <div className=\"flex items-center gap-1\">\n                    <Icon name=\"CircleDollarSign\" className=\"h-3 w-3\" />\n                    <span>Цена: {task.price || 0} ₽</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Показываем назначенных исполнителей */}\n              {renderAssignedUsers(task)}\n\n              <Button\n                onClick={() => onTakeTask(task.id, projectId)}\n                className=\"w-full mt-3\"\n                size=\"sm\"\n              >\n                <Icon name=\"CheckCircle\" className=\"mr-2 h-4 w-4\" />\n                Взять в работу\n              </Button>\n            </div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AvailableTasksSection;\n","\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport Icon from \"@/components/ui/icon\";\n\ninterface CommentInputFormProps {\n  initialValue?: string;\n  onSubmit: (comment: string) => void;\n}\n\n/**\n * Изолированный компонент для ввода комментариев\n */\nconst CommentInputForm: React.FC<CommentInputFormProps> = ({\n  initialValue = \"\",\n  onSubmit,\n}) => {\n  // Локальное состояние для текста комментария\n  const [comment, setComment] = useState(initialValue);\n  // Ссылка на элемент текстового поля\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  // Обработчик изменения текста\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setComment(e.target.value);\n  };\n\n  // Обработчик отправки\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (comment.trim()) {\n      onSubmit(comment);\n      setComment(\"\");\n    }\n  };\n  \n  // Предотвращаем всплытие событий клика\n  const handleContainerClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  return (\n    <form \n      onSubmit={handleSubmit} \n      onClick={handleContainerClick}\n      className=\"space-y-2\"\n    >\n      <Textarea\n        ref={textareaRef}\n        placeholder=\"Добавить комментарий...\"\n        value={comment}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n        onFocus={(e) => e.stopPropagation()}\n        className=\"w-full min-h-[80px] resize-none\"\n        autoComplete=\"off\"\n      />\n      <Button\n        type=\"submit\"\n        size=\"sm\"\n        disabled={!comment.trim()}\n        className=\"w-full\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <Icon name=\"Send\" className=\"h-4 w-4 mr-1\" />\n        Отправить\n      </Button>\n    </form>\n  );\n};\n\nexport default CommentInputForm;\n","import React, { useState, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Task, Project } from \"@/types/project\";\nimport Icon from \"@/components/ui/icon\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { getProgressColorClass } from \"@/utils/progressUtils\";\nimport CommentInputForm from \"./task/CommentInputForm\";\n\ninterface TaskWithProject extends Task {\n  projectId: string;\n  projectName: string;\n}\n\ninterface EmployeeTasksCardProps {\n  tasks: TaskWithProject[];\n  onUpdateProgress: (\n    taskId: string,\n    projectId: string,\n    progress: number,\n  ) => void;\n  onAddComment: (taskId: string, projectId: string, comment: string) => void;\n  projects?: Project[]; // Получаем проекты через пропсы\n}\n\nconst EmployeeTasksCard: React.FC<EmployeeTasksCardProps> = ({\n  tasks,\n  onUpdateProgress,\n  onAddComment,\n  projects = [], // Значение по умолчанию - пустой массив\n}) => {\n  const [expandedTasks, setExpandedTasks] = useState<Record<string, boolean>>(\n    {},\n  );\n  // ===COMMENTS-START===\n  const [commentsByTaskId, setCommentsByTaskId] = useState<\n    Record<string, string>\n  >({});\n  const getCommentForTask = (taskId: string) => commentsByTaskId[taskId] || \"\";\n  const setCommentForTask = (taskId: string, comment: string) => {\n    setCommentsByTaskId((prev) => ({\n      ...prev,\n      [taskId]: comment,\n    }));\n  };\n  // ===COMMENTS-END===\n\n  // Убедимся, что tasks определен и является массивом\n  const safeTasks = Array.isArray(tasks) ? tasks : [];\n\n  // Разделяем задачи на активные и завершенные\n  const activeTasks = safeTasks.filter((task) => (task.progress || 0) < 100);\n  const completedTasks = safeTasks.filter(\n    (task) => (task.progress || 0) === 100,\n  );\n\n  // Функция для тоггла раскрытия/закрытия задачи\n  const toggleTaskExpanded = (taskId: string) => {\n    setExpandedTasks((prev) => ({\n      ...prev,\n      [taskId]: !prev[taskId],\n    }));\n  };\n\n  // Обновляем обработчик отправки комментария\n  const handleSubmitComment = (\n    taskId: string,\n    projectId: string,\n    commentText: string,\n  ) => {\n    if (commentText.trim()) {\n      onAddComment(taskId, projectId, commentText);\n    }\n  };\n\n  // Функция для отображения дат\n  const formatDate = (dateString: string | undefined | null) => {\n    if (!dateString) return \"Не указано\";\n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return \"Неверный формат\";\n      return date.toLocaleDateString(\"ru-RU\");\n    } catch (error) {\n      return \"Неверный формат\";\n    }\n  };\n\n  // Группируем задачи по проектам для отображения дополнительной информации\n  const projectGroups = useMemo(() => {\n    if (!Array.isArray(safeTasks) || safeTasks.length === 0) {\n      return [];\n    }\n\n    const projectMap: Record<\n      string,\n      {\n        projectId: string;\n        projectName: string;\n        tasks: TaskWithProject[];\n      }\n    > = {};\n\n    safeTasks.forEach((task) => {\n      if (!task.projectId) return;\n\n      if (!projectMap[task.projectId]) {\n        projectMap[task.projectId] = {\n          projectId: task.projectId,\n          projectName: task.projectName || \"Без названия\",\n          tasks: [],\n        };\n      }\n\n      projectMap[task.projectId].tasks.push(task);\n    });\n\n    return Object.values(projectMap);\n  }, [safeTasks]);\n\n  // Компонент для отображения проекта с задачами\n  const ProjectGroup = ({\n    projectInfo,\n  }: {\n    projectInfo: {\n      projectId: string;\n      projectName: string;\n      tasks: TaskWithProject[];\n    };\n  }) => {\n    // Вычисляем прогресс проекта\n    const projectProgress = Math.round(\n      projectInfo.tasks.reduce((sum, task) => sum + (task.progress || 0), 0) /\n        Math.max(projectInfo.tasks.length, 1),\n    );\n\n    // Находим полную информацию о проекте - проверяем все возможные источники данных\n    const fullProject = useMemo(() => {\n      // Проверяем, доступны ли данные в task.fullProject (если передано из родительского компонента)\n      const taskWithFullProject = projectInfo.tasks.find((t) => t.fullProject);\n      if (taskWithFullProject?.fullProject) {\n        return taskWithFullProject.fullProject;\n      }\n\n      // Пробуем найти проект по ID в массиве projects\n      if (Array.isArray(projects)) {\n        const projectFromList = projects.find(\n          (p) => p.id === projectInfo.projectId,\n        );\n        if (projectFromList) {\n          return projectFromList;\n        }\n      }\n\n      // Если ни один способ не сработал, ищем даты напрямую в задачах\n      const firstTask = projectInfo.tasks[0];\n      if (firstTask) {\n        // Если в задаче есть ссылки на даты проекта, используем их\n        if (firstTask.projectStartDate || firstTask.projectEndDate) {\n          return {\n            id: projectInfo.projectId,\n            name: projectInfo.projectName,\n            startDate: firstTask.projectStartDate,\n            endDate: firstTask.projectEndDate,\n            description: \"\",\n            tasks: [],\n            createdAt: \"\",\n            createdBy: \"\",\n          };\n        }\n      }\n\n      return null;\n    }, [projectInfo.projectId, projectInfo.tasks]);\n\n    // Получаем даты проекта напрямую из задачи, если они есть\n    const projectStartDate =\n      fullProject?.startDate || projectInfo.tasks[0]?.projectStartDate;\n    const projectEndDate =\n      fullProject?.endDate || projectInfo.tasks[0]?.projectEndDate;\n\n    return (\n      <div className=\"mb-6 border rounded-md overflow-hidden\">\n        <div className=\"bg-gray-50 border-b p-3\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <h3 className=\"font-medium flex items-center\">\n              <Icon name=\"Folder\" className=\"h-4 w-4 mr-2 text-primary\" />\n              {projectInfo.projectName}\n            </h3>\n            <span className=\"text-sm\">{projectProgress}% выполнено</span>\n          </div>\n\n          {/* Даты проекта - проверяем все возможные источники данных */}\n          <div className=\"flex flex-wrap gap-x-4 text-xs mb-3\">\n            <div className=\"flex items-center gap-1\">\n              <span className=\"font-medium\">Начало:</span>\n              <span>\n                {projectStartDate ? formatDate(projectStartDate) : \"Не указано\"}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <span className=\"font-medium\">Окончание:</span>\n              <span>\n                {projectEndDate ? formatDate(projectEndDate) : \"Не указано\"}\n              </span>\n            </div>\n          </div>\n\n          <Progress\n            value={projectProgress}\n            className=\"h-1\"\n            indicatorClassName={getProgressColorClass(projectProgress)}\n          />\n        </div>\n        <div className=\"p-3\">\n          {projectInfo.tasks.map((task) => (\n            <TaskItem\n              key={\n                task.id || `task-${Math.random().toString(36).substring(2, 11)}`\n              }\n              task={task}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Компонент для отображения задачи\n  const TaskItem = ({ task }: { task: TaskWithProject }) => {\n    // Получаем данные проекта (либо из fullProject, либо из других полей)\n    const projectData = task.fullProject || {\n      id: task.projectId,\n      name: task.projectName || \"Без названия\",\n      startDate: task.projectStartDate,\n      endDate: task.projectEndDate,\n    };\n\n    // Отладка данных задачи и проекта\n    console.log(`TaskItem in EmployeeTasksCard (${task.id}):`, {\n      taskStartDate: task.startDate,\n      taskEndDate: task.endDate,\n      projectStartDate: projectData.startDate,\n      projectEndDate: projectData.endDate,\n    });\n\n    // Приоритет: сначала даты задачи, затем проекта\n    const startDate = task.startDate || projectData.startDate;\n    const endDate = task.endDate || projectData.endDate;\n\n    // Генерируем уникальный идентификатор для задачи, если его нет\n    const taskId =\n      task.id || `task-${Math.random().toString(36).substring(2, 11)}`;\n    const isExpanded = expandedTasks[taskId] || false;\n\n    // Безопасно получаем progress\n    const progress = typeof task.progress === \"number\" ? task.progress : 0;\n\n    // Получаем текст комментария из состояния\n    const commentText = getCommentForTask(taskId);\n\n    return (\n      <div className=\"border rounded-md mb-3 bg-white\">\n        {/* Заголовок задачи (всегда видимый) */}\n        <div\n          className=\"px-4 py-3 cursor-pointer flex flex-col\"\n          onClick={() => toggleTaskExpanded(taskId)}\n        >\n          <div className=\"flex justify-between w-full\">\n            <div className=\"font-medium\">{task.name || \"Без названия\"}</div>\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {task.projectName || \"Проект\"}\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-2 w-full mt-2\">\n            <Progress\n              value={progress}\n              className=\"h-2 w-full\"\n              indicatorClassName={getProgressColorClass(progress)}\n            />\n            <span className=\"text-xs whitespace-nowrap\">{progress}%</span>\n            <Icon\n              name={isExpanded ? \"ChevronUp\" : \"ChevronDown\"}\n              className=\"h-4 w-4 ml-1\"\n            />\n          </div>\n        </div>\n\n        {/* Развернутая информация о задаче */}\n        {isExpanded && (\n          <div className=\"px-4 pb-4 border-t\">\n            <div className=\"space-y-4 pt-3\">\n              <div>\n                <p className=\"text-sm text-slate-600 mb-2\">\n                  {task.description || \"Без описания\"}\n                </p>\n                <div className=\"grid grid-cols-2 gap-2 text-xs text-slate-500\">\n                  <div className=\"flex items-center gap-1\">\n                    <Icon name=\"Calendar\" className=\"h-3 w-3\" />\n                    <span>Начало: {formatDate(startDate)}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Icon name=\"CalendarClock\" className=\"h-3 w-3\" />\n                    <span>Дедлайн: {formatDate(endDate)}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Icon name=\"Clock\" className=\"h-3 w-3\" />\n                    <span>Время: {task.estimatedTime || 0} ч.</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Icon name=\"CircleDollarSign\" className=\"h-3 w-3\" />\n                    <span>\n                      Цена:{\" \"}\n                      {typeof task.price === \"number\"\n                        ? task.price.toLocaleString()\n                        : 0}{\" \"}\n                      ₽\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Прогресс выполнения</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {[0, 25, 50, 75, 100].map((value) => (\n                    <Button\n                      key={value}\n                      variant={progress === value ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onUpdateProgress(taskId, task.projectId, value);\n                      }}\n                    >\n                      {value}%\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Комментарии</p>\n                <div className=\"bg-slate-50 p-3 rounded-md mb-3 max-h-40 overflow-y-auto\">\n                  {Array.isArray(task.comments) && task.comments.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {task.comments.map((comment, index) => (\n                        <div\n                          key={index}\n                          className=\"text-sm border-l-2 border-slate-300 pl-2\"\n                        >\n                          <p className=\"text-xs text-slate-500\">\n                            {comment?.author || \"Система\"} •{\" \"}\n                            {formatDate(comment?.date)}\n                          </p>\n                          <p>{comment?.text || \"\"}</p>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-slate-500\">Нет комментариев</p>\n                  )}\n                </div>\n                {/* Заменяем старую форму ввода на новый компонент */}\n                <div onClick={(e) => e.stopPropagation()}>\n                  <CommentInputForm\n                    onSubmit={(text) => {\n                      handleSubmitComment(taskId, task.projectId, text);\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Отображение списка задач\n  const renderTaskList = (taskList: TaskWithProject[]) => {\n    if (taskList.length === 0) {\n      return (\n        <div className=\"text-center py-8\">\n          <Icon\n            name=\"ClipboardList\"\n            className=\"mx-auto h-12 w-12 text-slate-300\"\n          />\n          <p className=\"mt-2 text-slate-500\">Нет задач</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-3\">\n        {taskList.map((task) => (\n          <TaskItem\n            key={\n              task.id || `task-${Math.random().toString(36).substring(2, 11)}`\n            }\n            task={task}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Мои задачи</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"projects\">\n          <TabsList className=\"w-full mb-4\">\n            <TabsTrigger value=\"projects\" className=\"flex-1\">\n              По проектам{\" \"}\n              <Badge className=\"ml-2 bg-primary\">{projectGroups.length}</Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"active\" className=\"flex-1\">\n              Активные{\" \"}\n              <Badge className=\"ml-2 bg-primary\">{activeTasks.length}</Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"completed\" className=\"flex-1\">\n              Завершенные{\" \"}\n              <Badge className=\"ml-2 bg-green-600\">\n                {completedTasks.length}\n              </Badge>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"projects\">\n            {projectGroups.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Icon\n                  name=\"Briefcase\"\n                  className=\"mx-auto h-12 w-12 text-slate-300\"\n                />\n                <p className=\"mt-2 text-slate-500\">\n                  У вас нет задач в проектах\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {projectGroups.map((projectInfo) => (\n                  <ProjectGroup\n                    key={\n                      projectInfo.projectId ||\n                      `project-${Math.random().toString(36).substring(2, 11)}`\n                    }\n                    projectInfo={projectInfo}\n                  />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"active\">\n            {renderTaskList(activeTasks)}\n          </TabsContent>\n\n          <TabsContent value=\"completed\">\n            {renderTaskList(completedTasks)}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default EmployeeTasksCard;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { NavigateFunction } from \"react-router-dom\";\nimport { Project, Task, User } from \"@/types/project\";\nimport { toast } from \"sonner\";\n\n// Интерфейс для задачи с информацией о проекте\ninterface TaskWithProject extends Task {\n  projectId: string;\n  projectName: string;\n}\n\n/**\n * Хук для работы с данными сотрудника\n */\nexport function useEmployeeData(navigate: NavigateFunction) {\n  // Все состояния объявлены на верхнем уровне, без условий\n  const [user, setUser] = useState<User | null>(null);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [assignedTasks, setAssignedTasks] = useState<TaskWithProject[]>([]);\n  const [availableTasks, setAvailableTasks] = useState<TaskWithProject[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Функция для перенаправления на страницу входа\n  const redirectToLogin = useCallback(\n    (message?: string) => {\n      if (message) {\n        sessionStorage.setItem(\"auth_message\", message);\n      }\n      localStorage.removeItem(\"user\");\n      navigate(\"/login\");\n    },\n    [navigate],\n  );\n\n  // Обработка проектов для получения задач - без условных хуков внутри\n  const processProjects = useCallback(\n    (\n      projectsList: Project[],\n      userData: User,\n    ): {\n      userTasks: TaskWithProject[];\n      otherTasks: TaskWithProject[];\n    } => {\n      const userTasks: TaskWithProject[] = [];\n      const otherTasks: TaskWithProject[] = [];\n\n      try {\n        if (!Array.isArray(projectsList)) {\n          console.error(\"projectsList не является массивом\");\n          return { userTasks, otherTasks };\n        }\n\n        projectsList.forEach((project) => {\n          if (!project || !Array.isArray(project.tasks)) {\n            return;\n          }\n\n          project.tasks.forEach((task) => {\n            if (!task) return;\n\n            // Создаем копию задачи с дополнительными полями\n            const taskWithProject: TaskWithProject = {\n              ...task,\n              projectId: project.id,\n              projectName: project.name || \"Без названия\",\n              startDate: task.startDate || project.startDate,\n              endDate: task.endDate || project.endDate,\n              projectStartDate: project.startDate,\n              projectEndDate: project.endDate,\n            };\n\n            // Проверка назначения задачи текущему пользователю\n            let isAssigned = false;\n\n            // Проверяем assignedTo (ID пользователя)\n            if (\n              task.assignedTo &&\n              userData.id &&\n              task.assignedTo === userData.id\n            ) {\n              isAssigned = true;\n            }\n\n            // Проверяем assignedToNames (массив имен или ID)\n            if (!isAssigned && Array.isArray(task.assignedToNames)) {\n              isAssigned = task.assignedToNames.some((name) => {\n                if (!name) return false;\n\n                // Приводим значения к строкам для сравнения\n                const nameStr = String(name).toLowerCase();\n                const userIdStr = userData.id\n                  ? String(userData.id).toLowerCase()\n                  : \"\";\n                const userNameStr = userData.name\n                  ? String(userData.name).toLowerCase()\n                  : \"\";\n                const userUsernameStr = userData.username\n                  ? String(userData.username).toLowerCase()\n                  : \"\";\n\n                // Проверяем совпадение с любым из идентификаторов пользователя\n                return (\n                  nameStr === userIdStr ||\n                  nameStr === userNameStr ||\n                  nameStr === userUsernameStr\n                );\n              });\n            }\n\n            // Добавляем в соответствующий список\n            if (isAssigned) {\n              userTasks.push(taskWithProject);\n            } else {\n              otherTasks.push(taskWithProject);\n            }\n          });\n        });\n      } catch (error) {\n        console.error(\"Ошибка при обработке проектов:\", error);\n      }\n\n      return { userTasks, otherTasks };\n    },\n    [],\n  );\n\n  // Загрузка данных пользователя и проектов - вызываем один раз, без условий\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoading(true);\n      try {\n        // Загрузка пользователя из localStorage\n        const userJson = localStorage.getItem(\"user\");\n        if (!userJson) {\n          redirectToLogin();\n          return;\n        }\n\n        let userData;\n        try {\n          userData = JSON.parse(userJson);\n\n          // Если у пользователя нет имени, попробуем найти его в таблице пользователей\n          if (userData && !userData.name) {\n            const usersJson = localStorage.getItem(\"users\");\n            if (usersJson) {\n              const users = JSON.parse(usersJson);\n              if (Array.isArray(users)) {\n                const userRecord = users.find((u) => u.id === userData.id);\n                if (userRecord && userRecord.name) {\n                  userData.name = userRecord.name;\n                }\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Ошибка при парсинге данных пользователя:\", error);\n          redirectToLogin(\"Проблема с данными пользователя\");\n          return;\n        }\n\n        if (!userData || !userData.isAuthenticated) {\n          redirectToLogin(\"Сессия истекла. Пожалуйста, войдите снова.\");\n          return;\n        }\n\n        // Проверяем роль пользователя\n        if (userData.role === \"manager\") {\n          navigate(\"/dashboard\");\n          return;\n        }\n\n        setUser(userData);\n\n        // Загрузка проектов\n        let projectsList = [];\n        try {\n          const projectsData = localStorage.getItem(\"projects\");\n          projectsList = projectsData ? JSON.parse(projectsData) : [];\n          console.log(\"Загружено проектов:\", projectsList.length);\n\n          if (!Array.isArray(projectsList)) {\n            console.error(\"Данные проектов не являются массивом\");\n            projectsList = [];\n          }\n        } catch (error) {\n          console.error(\"Ошибка при загрузке проектов:\", error);\n          projectsList = [];\n        }\n\n        setProjects(projectsList);\n\n        // Обработка проектов для получения задач\n        try {\n          const { userTasks, otherTasks } = processProjects(\n            projectsList,\n            userData,\n          );\n          console.log(\"Задачи пользователя:\", userTasks.length);\n          console.log(\"Доступные задачи:\", otherTasks.length);\n\n          setAssignedTasks(userTasks);\n          setAvailableTasks(otherTasks);\n        } catch (error) {\n          console.error(\"Ошибка при обработке задач:\", error);\n          setAssignedTasks([]);\n          setAvailableTasks([]);\n        }\n      } catch (error) {\n        console.error(\"Ошибка при загрузке данных:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, [navigate, processProjects, redirectToLogin]);\n\n  // Остальные функции объявлены с useCallback, чтобы избежать лишних ререндеров\n\n  // Обработчик обновления прогресса задачи\n  const handleUpdateTaskProgress = useCallback(\n    (taskId: string, projectId: string, progress: number) => {\n      try {\n        if (!Array.isArray(projects) || projects.length === 0) {\n          console.error(\"Проекты отсутствуют или не являются массивом\");\n          return false;\n        }\n\n        const project = projects.find((p) => p.id === projectId);\n        if (!project) {\n          console.error(`Проект с ID ${projectId} не найден`);\n          return false;\n        }\n\n        const task = project.tasks.find((t) => t.id === taskId);\n        if (!task) {\n          console.error(`Задача с ID ${taskId} не найдена`);\n          return false;\n        }\n\n        const updatedTask: Task = {\n          ...task,\n          progress,\n          actualStartDate: task.actualStartDate || new Date().toISOString(),\n          actualEndDate:\n            progress === 100\n              ? task.actualEndDate || new Date().toISOString()\n              : progress < 100\n                ? null\n                : task.actualEndDate,\n        };\n\n        const updatedProjects = projects.map((p) => {\n          if (p.id === projectId) {\n            return {\n              ...p,\n              tasks: p.tasks.map((t) => (t.id === taskId ? updatedTask : t)),\n            };\n          }\n          return p;\n        });\n\n        localStorage.setItem(\"projects\", JSON.stringify(updatedProjects));\n        setProjects(updatedProjects);\n\n        if (user) {\n          const { userTasks, otherTasks } = processProjects(\n            updatedProjects,\n            user,\n          );\n          setAssignedTasks(userTasks);\n          setAvailableTasks(otherTasks);\n        }\n\n        // Перемещаем вызов toast в useEffect или в обработчик событий, а не внутри функции рендеринга\n        return true;\n      } catch (error) {\n        console.error(\"Ошибка при обновлении прогресса:\", error);\n        return false;\n      }\n    },\n    [projects, user, processProjects],\n  );\n\n  // Используем useEffect для показа уведомлений после выполнения операций\n  useEffect(() => {\n    // Дополнительный код может быть добавлен здесь для отображения уведомлений\n    // после изменения состояния компонента\n  }, [assignedTasks, availableTasks]);\n\n  // Обработчик принятия задачи в работу\n  const handleTakeTask = useCallback(\n    (taskId: string, projectId: string) => {\n      if (!user) {\n        setTimeout(() => {\n          toast.error(\"Необходимо войти в систему\");\n        }, 0);\n        return false;\n      }\n\n      try {\n        const project = projects.find((p) => p.id === projectId);\n        if (!project) {\n          setTimeout(() => {\n            toast.error(\"Проект не найден\");\n          }, 0);\n          return false;\n        }\n\n        const task = project.tasks.find((t) => t.id === taskId);\n        if (!task) {\n          setTimeout(() => {\n            toast.error(\"Задача не найдена\");\n          }, 0);\n          return false;\n        }\n\n        // Определение существующих значений или инициализация пустыми массивами\n        const currentAssignedToNames = Array.isArray(task.assignedToNames)\n          ? [...task.assignedToNames]\n          : [];\n\n        // Создаем идентификаторы пользователя для проверки\n        const userIdentifiers = [user.id, user.name, user.username]\n          .filter(Boolean)\n          .map((id) => String(id).toLowerCase());\n\n        // Проверяем, не назначена ли задача уже этому пользователю\n        const isAlreadyAssigned = currentAssignedToNames.some((name) => {\n          if (!name) return false;\n          const nameStr = String(name).toLowerCase();\n          return userIdentifiers.includes(nameStr);\n        });\n\n        if (isAlreadyAssigned) {\n          setTimeout(() => {\n            toast.info(\"Эта задача уже назначена вам\");\n          }, 0);\n          return true; // Возвращаем true, т.к. фактически задача уже назначена\n        }\n\n        // Подготавливаем идентификатор пользователя для добавления в список\n        const userIdentifier = user.name || user.id || user.username;\n\n        // Формируем новый список исполнителей с текущим пользователем\n        const newAssignedToNames = [...currentAssignedToNames, userIdentifier];\n\n        console.log(\"Обновление задачи:\", {\n          taskId,\n          currentAssignedToNames,\n          newAssignedToNames,\n          userId: user.id,\n          userName: user.name,\n        });\n\n        // Обновляем задачу\n        const updatedTask: Task = {\n          ...task,\n          assignedTo: user.id,\n          assignedToNames: newAssignedToNames,\n          actualStartDate: task.actualStartDate || new Date().toISOString(),\n        };\n\n        // Обновляем проект с обновленной задачей\n        const updatedProjects = projects.map((p) => {\n          if (p.id === projectId) {\n            return {\n              ...p,\n              tasks: p.tasks.map((t) => (t.id === taskId ? updatedTask : t)),\n            };\n          }\n          return p;\n        });\n\n        // Сохраняем обновленные проекты в localStorage\n        localStorage.setItem(\"projects\", JSON.stringify(updatedProjects));\n\n        // Обновляем состояние проектов\n        setProjects(updatedProjects);\n\n        // Обрабатываем обновленные проекты для получения списков задач\n        const { userTasks, otherTasks } = processProjects(\n          updatedProjects,\n          user,\n        );\n\n        // Обновляем состояния списков задач\n        setAssignedTasks(userTasks);\n        setAvailableTasks(otherTasks);\n\n        // Показываем уведомление об успешном назначении задачи\n        setTimeout(() => {\n          toast.success(\"Задача принята в работу\");\n        }, 0);\n\n        return true;\n      } catch (error) {\n        console.error(\"Ошибка при принятии задачи:\", error);\n        setTimeout(() => {\n          toast.error(\"Ошибка при принятии задачи\");\n        }, 0);\n        return false;\n      }\n    },\n    [projects, user, processProjects],\n  );\n\n  // Обработчик добавления комментария к задаче\n  const handleAddTaskComment = useCallback(\n    (taskId: string, projectId: string, commentText: string) => {\n      if (!user || !commentText.trim()) {\n        return false;\n      }\n\n      try {\n        const project = projects.find((p) => p.id === projectId);\n        if (!project) {\n          console.error(\"Проект не найден\");\n          return false;\n        }\n\n        const task = project.tasks.find((t) => t.id === taskId);\n        if (!task) {\n          console.error(\"Задача не найдена\");\n          return false;\n        }\n\n        // Создаем новый комментарий\n        const newComment = {\n          id: `comment-${Date.now()}`,\n          text: commentText,\n          author: user.name || \"Сотрудник\",\n          date: new Date().toISOString(),\n        };\n\n        // Обновляем задачу\n        const updatedTask = {\n          ...task,\n          comments: [\n            ...(Array.isArray(task.comments) ? task.comments : []),\n            newComment,\n          ],\n        };\n\n        // Обновляем проект с новой задачей\n        const updatedProjects = projects.map((p) => {\n          if (p.id === projectId) {\n            return {\n              ...p,\n              tasks: p.tasks.map((t) => (t.id === taskId ? updatedTask : t)),\n            };\n          }\n          return p;\n        });\n\n        // Сохраняем изменения в localStorage\n        localStorage.setItem(\"projects\", JSON.stringify(updatedProjects));\n\n        // Обновляем состояние проектов\n        setProjects(updatedProjects);\n\n        // Обновляем списки задач\n        const { userTasks, otherTasks } = processProjects(\n          updatedProjects,\n          user,\n        );\n        setAssignedTasks(userTasks);\n        setAvailableTasks(otherTasks);\n\n        return true;\n      } catch (error) {\n        console.error(\"Ошибка при добавлении комментария:\", error);\n        return false;\n      }\n    },\n    [projects, user, processProjects],\n  );\n\n  // Выход из системы\n  const handleLogout = useCallback(() => {\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  }, [navigate]);\n\n  return {\n    user,\n    assignedTasks,\n    availableTasks,\n    projects,\n    isLoading,\n    handleTakeTask,\n    handleUpdateTaskProgress,\n    handleAddTaskComment,\n    handleLogout,\n  };\n}\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport EmployeeLayout from \"@/components/employee/EmployeeLayout\";\nimport EmployeeContent from \"@/components/employee/EmployeeContent\";\nimport AvailableTasksSection from \"@/components/employee/AvailableTasksSection\";\nimport EmployeeTasksCard from \"@/components/employee/EmployeeTasksCard\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useEmployeeData } from \"@/hooks/useEmployeeData\";\nimport { initializeProjectsStorage } from \"@/utils/storageUtils\";\nimport { toast } from \"sonner\";\n\nconst Employee: React.FC = () => {\n  // Важно! Все хуки должны быть на верхнем уровне компонента\n  const navigate = useNavigate();\n  const [initialized, setInitialized] = useState(false);\n  const [shouldRedirect, setShouldRedirect] = useState(false);\n\n  // Получаем данные из хука - всегда вызываем в том же порядке\n  const {\n    assignedTasks,\n    availableTasks,\n    projects,\n    user,\n    isLoading,\n    handleTakeTask,\n    handleUpdateTaskProgress,\n    handleAddTaskComment,\n    handleLogout,\n  } = useEmployeeData(navigate);\n\n  // Инициализируем хранилище при монтировании - если оно пусто, просто создаем пустой массив\n  useEffect(() => {\n    const initStorage = async () => {\n      try {\n        // Инициализируем хранилище (пустой массив, если данных нет)\n        await initializeProjectsStorage();\n        setInitialized(true);\n      } catch (error) {\n        console.error(\"Ошибка при инициализации хранилища:\", error);\n        setInitialized(true); // Все равно устанавливаем true, чтобы не блокировать UI\n      }\n    };\n\n    initStorage();\n  }, []);\n\n  // Обработка перенаправления - без условий\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setShouldRedirect(true);\n    }\n  }, [isLoading, user]);\n\n  // Отдельный useEffect для навигации - без условий\n  useEffect(() => {\n    if (shouldRedirect) {\n      navigate(\"/login\");\n    }\n  }, [shouldRedirect, navigate]);\n\n  // Обработчик для принятия задачи с последующим уведомлением\n  const handleTaskTake = useCallback(\n    (taskId: string, projectId: string) => {\n      console.log(\"Попытка взять задачу в работу:\", { taskId, projectId });\n      const result = handleTakeTask(taskId, projectId);\n\n      // Выводим в консоль результат для отладки\n      console.log(\"Результат взятия задачи:\", result);\n\n      // Отложенное уведомление для предотвращения обновления состояния во время рендеринга\n      setTimeout(() => {\n        if (result) {\n          toast.success(\"Задача принята в работу\");\n        } else {\n          toast.error(\"Не удалось принять задачу\");\n        }\n      }, 0);\n\n      return result;\n    },\n    [handleTakeTask],\n  );\n\n  // Обработчик для обновления прогресса с последующим уведомлением\n  const handleProgressUpdate = useCallback(\n    (taskId: string, projectId: string, progress: number) => {\n      const result = handleUpdateTaskProgress(taskId, projectId, progress);\n\n      // Отложенное уведомление для предотвращения обновления состояния во время рендеринга\n      setTimeout(() => {\n        if (result) {\n          toast.success(`Прогресс обновлен: ${progress}%`);\n        } else {\n          toast.error(\"Не удалось обновить прогресс\");\n        }\n      }, 0);\n\n      return result;\n    },\n    [handleUpdateTaskProgress],\n  );\n\n  // Обработчик для добавления комментария с последующим уведомлением\n  const handleCommentAdd = useCallback(\n    (taskId: string, projectId: string, comment: string) => {\n      console.log(\"Добавление комментария:\", { taskId, projectId, comment });\n      const result = handleAddTaskComment(taskId, projectId, comment);\n\n      // Отложенное уведомление для предотвращения обновления состояния во время рендеринга\n      setTimeout(() => {\n        if (result) {\n          toast.success(\"Комментарий добавлен\");\n        } else {\n          toast.error(\"Не удалось добавить комментарий\");\n        }\n      }, 0);\n\n      return result;\n    },\n    [handleAddTaskComment],\n  );\n\n  // Если данные загружаются или хранилище еще не инициализировано, показываем заглушку\n  if (isLoading || !initialized) {\n    return (\n      <div className=\"p-4 space-y-4\">\n        <Skeleton className=\"h-12 w-full\" />\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Skeleton className=\"h-64 w-full\" />\n          <Skeleton className=\"h-64 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  // Проверяем, что у нас есть пользователь перед рендерингом основного контента\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl\">Ошибка авторизации</h2>\n          <p className=\"mt-2\">Пожалуйста, войдите в систему</p>\n          <Button className=\"mt-4\" onClick={() => navigate(\"/login\")}>\n            Перейти на страницу входа\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Рендерим основной контент только если все проверки пройдены\n  return (\n    <EmployeeLayout userName={user.name || \"\"} onLogout={handleLogout}>\n      <EmployeeContent>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Карточка с назначенными задачами */}\n          <EmployeeTasksCard\n            tasks={assignedTasks}\n            onUpdateProgress={handleProgressUpdate}\n            onAddComment={handleCommentAdd}\n            projects={projects}\n          />\n\n          {/* Секция с доступными задачами */}\n          <AvailableTasksSection\n            tasks={availableTasks}\n            onTakeTask={handleTaskTake}\n            projects={projects}\n          />\n        </div>\n      </EmployeeContent>\n    </EmployeeLayout>\n  );\n};\n\nexport default Employee;\n"],"names":["EmployeeLayout","children","userName","onLogout","displayName","jsxs","jsx","Icon","Button","EmployeeContent","getProgressColorClass","percent","validPercent","EmptyAvailableTasks","AvailableTasksSection","tasks","onTakeTask","projects","hasAvailableTasks","formatDate","dateString","error","calculateProjectProgress","project","totalProgress","sum","task","renderAssignedUsers","displayNames","getAssigneeNames","getFullProject","projectId","p","Card","CardHeader","CardTitle","CardDescription","CardContent","item","index","itemProject","fullProject","projectName","projectProgress","projectStartDate","projectEndDate","taskStartDate","taskEndDate","Progress","CommentInputForm","initialValue","onSubmit","comment","setComment","useState","textareaRef","useRef","handleChange","e","handleSubmit","handleContainerClick","Textarea","EmployeeTasksCard","onUpdateProgress","onAddComment","expandedTasks","setExpandedTasks","commentsByTaskId","setCommentsByTaskId","getCommentForTask","taskId","safeTasks","activeTasks","completedTasks","toggleTaskExpanded","prev","__spreadProps","__spreadValues","handleSubmitComment","commentText","date","projectGroups","useMemo","projectMap","ProjectGroup","projectInfo","taskWithFullProject","t","projectFromList","firstTask","_a","_b","TaskItem","projectData","startDate","endDate","isExpanded","progress","Badge","value","text","renderTaskList","taskList","Tabs","TabsList","TabsTrigger","TabsContent","useEmployeeData","navigate","user","setUser","setProjects","assignedTasks","setAssignedTasks","availableTasks","setAvailableTasks","isLoading","setIsLoading","redirectToLogin","useCallback","message","processProjects","projectsList","userData","userTasks","otherTasks","taskWithProject","isAssigned","name","nameStr","userIdStr","userNameStr","userUsernameStr","useEffect","__async","userJson","usersJson","users","userRecord","u","projectsData","handleUpdateTaskProgress","updatedTask","updatedProjects","handleTakeTask","toast","currentAssignedToNames","userIdentifiers","id","userIdentifier","newAssignedToNames","handleAddTaskComment","newComment","handleLogout","Employee","useNavigate","initialized","setInitialized","shouldRedirect","setShouldRedirect","initializeProjectsStorage","handleTaskTake","result","handleProgressUpdate","handleCommentAdd","Skeleton"],"mappings":"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"}